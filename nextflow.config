#!/usr/bin/env nextflow

/*
 * -------------------------------------------------
 *  amchakra/clip-viz config file
 * -------------------------------------------------
 * Main config
 */


// Main parameters
params {
  // General
  outdir = './results'
  tracedir = "${params.outdir}/pipeline_info"
  singularity_pull_docker_container = false
}

// Pipeline params
params {
    input = null
    fai = null

    // bamCoverage
    bin_size = 1
    smooth_length = 25
}

// Enable by default nextflow tracing and place in trace dir location
timeline {
  enabled = true
  file = "${params.tracedir}/execution_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/execution_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace.txt"
  fields = "task_id,hash,native_id,name,status,exit,submit,start,complete,duration,realtime,cpus,time,memory,%cpu,peak_rss,peak_vmem,rchar,wchar"
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_dag.svg"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

// Avoid this error:
// WARNING: Your kernel does not support swap limit capabilities or the cgroup is not mounted. 
// Memory limited without swap.
// Testing this in nf-core after discussion here https://github.com/nf-core/tools/pull/351, 
//once this is established and works well, nextflow might implement this behavior as new default.
docker.runOptions = '-u \$(id -u):\$(id -g)'

// Create run profiles
profiles {
  crick { includeConfig 'https://raw.githubusercontent.com/nf-core/configs/master/conf/crick.config' }
}

// Create process scaling defaults for running on a cluster
process {

  // Memory and time increases with the number of retrys
  cpus = { check_max( 2, 'cpus' ) }
  memory = { check_max( 4.GB * task.attempt, 'memory' ) }
  time = { check_max( 2.h * task.attempt, 'time' ) }

  errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'terminate' }
  maxRetries = 1
  maxErrors = '-1'

  withLabel: process_medium {
    cpus = { check_max (8, 'cpus')}
    memory = { check_max( 32.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }
  
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}